name: Build Ubuntu Packages

on:
  push:
    tags: ["v*"]
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  build_deb_packages:
    name: Build DEB packages on ${{ matrix.ubuntu }}
    runs-on: ${{ matrix.ubuntu }}
    strategy:
      fail-fast: false
      matrix:
        ubuntu: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        arch: [arm64]
        # Exclude unsupported combinations
        # exclude:
        #   # If there are combinations that need to be excluded, you can add them here
        #   - ubuntu: ubuntu-20.04
        #     arch: arm64  # For example: suppose 20.04 does not build arm64 version

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full clone to get version information

      # Set up QEMU for cross-compilation
      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Install necessary build dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake pkg-config libncurses-dev

      - name: Setup cross-compilation
        if: matrix.arch == 'arm64' && runner.os == 'Linux'
        run: |
          # Install basic cross-compilation tools first (on native arch)
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu software-properties-common

          # Add arm64 architecture
          sudo dpkg --add-architecture arm64

          # --- NEW: Restrict default sources to native architecture ---
          NATIVE_ARCH=$(dpkg --print-architecture)
          echo "Native architecture is: ${NATIVE_ARCH}"
          echo "Restricting default APT sources to [arch=${NATIVE_ARCH}]"
          # Modify the main sources.list file
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo sed -i -e "s/^deb http/deb [arch=${NATIVE_ARCH}] http/" /etc/apt/sources.list
          # Modify files in sources.list.d (handle potential existing arch qualifiers)
          for list_file in /etc/apt/sources.list.d/*.list; do
            if [ -f "$list_file" ]; then
              echo "Processing $list_file"
              sudo cp "$list_file" "${list_file}.bak"
              # Add arch qualifier only if the line starts with 'deb http' and doesn't already have one
              sudo sed -i -e "/^deb http/ s/^deb /deb [arch=${NATIVE_ARCH}] /" "$list_file"
            fi
          done
          echo "Default sources modified."
          # --- End of NEW section ---

          # Get Ubuntu Codename (e.g., focal, jammy, noble)
          source /etc/os-release
          UBUNTU_CODENAME=$VERSION_CODENAME
          echo "Using Ubuntu Codename: $UBUNTU_CODENAME for arm64 sources"

          # Add the 'ports.ubuntu.com' repository specifically for arm64
          # Ensure previous add-apt-repository commands are cleaned up if run before
          # sudo rm -f /etc/apt/sources.list.d/ports_ubuntu_com_ubuntu_ports*.list
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME} main restricted universe multiverse"
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-updates main restricted universe multiverse"
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-backports main restricted universe multiverse"
          sudo add-apt-repository "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-security main restricted universe multiverse"
          echo "Added arm64 sources from ports.ubuntu.com"

          # --- Final Update ---
          # Update package lists AFTER modifying native sources and adding arm64 sources
          echo "Running final apt-get update..."
          sudo apt-get update -o Debug::Acquire::http=true # Enable debug output for http

          # Install necessary arm64 build dependencies
          echo "Installing arm64 libraries..."
          sudo apt-get install -y libncurses-dev:arm64
          # Add any other required :arm64 dependencies here

          # Set up CMake toolchain environment variable (if your toolchain file needs it)
          echo "CMAKE_ARGS=-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/.github/toolchain-arm64.cmake" >> $GITHUB_ENV

      # Build and package
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake ${{ env.CMAKE_ARGS }} \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_PYTHON_BINDINGS=OFF \
                -DBUILD_CPP_BINDINGS=ON \
                -DBUILD_CLI=ON \
                -DBUILD_TESTS=OFF \
                -DBUILD_EXAMPLES=OFF \
                ..

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Package
        run: |
          cd build
          cpack -G DEB

      # Rename packages to include Ubuntu version and architecture information
      - name: Rename packages
        run: |
          cd build
          ubuntu_version=$(echo ${{ matrix.ubuntu }} | sed 's/ubuntu-//')
          for pkg in *.deb; do
            new_name=$(echo $pkg | sed "s/.deb/_$ubuntu_version-${{ matrix.arch }}.deb/")
            mv "$pkg" "$new_name"
          done

      # Upload build artifacts
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-packages-${{ matrix.ubuntu }}-${{ matrix.arch }}
          path: build/*.deb
          if-no-files-found: error

  # If it's a release tag, upload the packages to GitHub Releases
  release_packages:
    name: Release Ubuntu Packages
    needs: build_deb_packages
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: ubuntu-packages-*
          merge-multiple: false

      - name: Prepare packages for release
        run: |
          mkdir -p release_packages
          find artifacts -name "*.deb" -exec cp {} release_packages/ \;

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_packages/*.deb
